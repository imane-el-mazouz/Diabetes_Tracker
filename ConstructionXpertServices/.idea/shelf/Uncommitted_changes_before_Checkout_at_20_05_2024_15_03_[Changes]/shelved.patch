Index: ../PROJETS DE L'ENAA/WEATHER  APP/src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.sql.SQLException;\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        City city = new City();\r\n        CityHistory cityHistory = new CityHistory();\r\n        Menu menu = new Menu(city, cityHistory);\r\n        menu.showMenu();\r\n    }\r\n}\r\n
===================================================================
diff --git a/../PROJETS DE L'ENAA/WEATHER  APP/src/Main.java b/../PROJETS DE L'ENAA/WEATHER  APP/src/Main.java
--- a/../PROJETS DE L'ENAA/WEATHER  APP/src/Main.java	
+++ b/../PROJETS DE L'ENAA/WEATHER  APP/src/Main.java	
@@ -1,9 +1,13 @@
-import java.sql.SQLException;
+import java.sql.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Scanner;
+
+
 public class Main {
-    public static void main(String[] args) {
-        City city = new City();
-        CityHistory cityHistory = new CityHistory();
-        Menu menu = new Menu(city, cityHistory);
-        menu.showMenu();
+    public static void main(String[] args) throws SQLException {
+        Menu.MenuPrincipal();
+
     }
 }
+
Index: ../PROJETS DE L'ENAA/WEATHER  APP/src/DatabaseManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.net.URL;\r\nimport java.sql.*;\r\nimport java.util.*;\r\npublic class DatabaseManager {\r\n     private static final String URL = \"jdbc:mysql://localhost/meteo\";\r\n     private static final String USERNAME = \"imane\";\r\n     private static final String PASSWORD = \"1234\";\r\n\r\n\r\n     public  static Connection getConnection() throws SQLException {\r\n          return DriverManager.getConnection(URL, USERNAME, PASSWORD);\r\n    }\r\n\r\n     public static List<City> getAllcities() throws SQLException {\r\n          List<City> cities = new ArrayList<>();\r\n          String sql =\"SELECT *FROM City\" ;\r\n          Connection connection = getConnection();\r\n          PreparedStatement statement = connection.prepareStatement(sql);\r\n          ResultSet resultSet = statement.executeQuery();\r\n          while (resultSet.next()) {\r\n               int cityId = resultSet.getInt(\"cityId\");\r\n               String cityName = resultSet.getString(\"cityName\");\r\n               int currentTemperature = resultSet.getInt(\"currentTemperature\");\r\n               int currentHumidity = resultSet.getInt(\"currentHumidity\");\r\n               int currentwindSpeed = resultSet.getInt(\"currentwindSpeed\");\r\n               cities.add(new City(cityId, cityName, currentTemperature,currentHumidity,currentwindSpeed));\r\n          }\r\n          connection.close();\r\n          statement.close();\r\n          resultSet.close();\r\n          return cities;\r\n     }\r\n//     public static List< CityHistory> getAllHistorycities() throws SQLException{\r\n//          List<CityHistory> cityHistories = new ArrayList<>();\r\n//          String sql =\"SELECT * FROM CityHistory\" ;\r\n//          Connection connection =getConnection();\r\n//          PreparedStatement statement = connection.prepareStatement(sql);\r\n//          ResultSet resultSet= statement.executeQuery();\r\n//          while (resultSet.next()) {\r\n//               int historicalDataId = resultSet.getInt(\"historicalDataId\");\r\n//               int cityId = resultSet.getInt(\"cityId\");\r\n//               String eventDate = resultSet.getString(\"eventDate\");\r\n//               int temperature = resultSet.getInt(\"temperature\");\r\n//               cityHistories.add(new CityHistory(historicalDataId, cityId, eventDate, temperature));\r\n//          }\r\n//          connection.close();\r\n//          statement.close();\r\n//          resultSet.close();\r\n//          return cityHistories;\r\n//          }\r\n     }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n
===================================================================
diff --git a/../PROJETS DE L'ENAA/WEATHER  APP/src/DatabaseManager.java b/../PROJETS DE L'ENAA/WEATHER  APP/src/DatabaseManager.java
--- a/../PROJETS DE L'ENAA/WEATHER  APP/src/DatabaseManager.java	
+++ b/../PROJETS DE L'ENAA/WEATHER  APP/src/DatabaseManager.java	
@@ -1,5 +1,5 @@
-import java.net.URL;
 import java.sql.*;
+import java.time.LocalDate;
 import java.util.*;
 public class DatabaseManager {
      private static final String URL = "jdbc:mysql://localhost/meteo";
@@ -7,50 +7,194 @@
      private static final String PASSWORD = "1234";
 
 
-     public  static Connection getConnection() throws SQLException {
+
+     public static Connection getConnection() throws SQLException {
           return DriverManager.getConnection(URL, USERNAME, PASSWORD);
-    }
+     }
 
      public static List<City> getAllcities() throws SQLException {
-          List<City> cities = new ArrayList<>();
-          String sql ="SELECT *FROM City" ;
+          List<City> cities = new  ArrayList<>();
+          String sql = "SELECT * FROM City WHERE currentWindSpeed <=10";
           Connection connection = getConnection();
           PreparedStatement statement = connection.prepareStatement(sql);
           ResultSet resultSet = statement.executeQuery();
           while (resultSet.next()) {
+               City city = new City();
+               city.setCityId(resultSet.getInt("cityId"));
+               city.setCityName(resultSet.getString("cityName"));
+               city.setCurrentTemperature(resultSet.getInt("currentTemperature"));
+               city.setCurrentHumidity(resultSet.getInt("currentHumidity"));
+               city.setCurrentWindSpeed(resultSet.getInt("currentWindSpeed"));
+               cities.add(new City());
+          }
+          cities.stream().filter(city -> cities)forEach(city -> city.setCityName());
+          connection.close();
+          statement.close();
+          resultSet.close();
+          return cities;
+     }
+
+     public static List<CityHistory> getAllHistorycities() throws SQLException {
+          List<CityHistory> cityHistories = new ArrayList<>();
+          String sql = "SELECT * FROM CityHistory";
+          Connection connection = getConnection();
+          PreparedStatement statement = connection.prepareStatement(sql);
+          ResultSet resultSet = statement.executeQuery();
+          while (resultSet.next()) {
+               int historicalDataId = resultSet.getInt("historicalDataId");
                int cityId = resultSet.getInt("cityId");
-               String cityName = resultSet.getString("cityName");
-               int currentTemperature = resultSet.getInt("currentTemperature");
-               int currentHumidity = resultSet.getInt("currentHumidity");
-               int currentwindSpeed = resultSet.getInt("currentwindSpeed");
-               cities.add(new City(cityId, cityName, currentTemperature,currentHumidity,currentwindSpeed));
+               String eventDate = resultSet.getString("eventDate");
+               int temperature = resultSet.getInt("temperature");
+               cityHistories.add(new CityHistory(historicalDataId, cityId, eventDate, temperature));
           }
           connection.close();
           statement.close();
           resultSet.close();
-          return cities;
+          return cityHistories;
      }
-//     public static List< CityHistory> getAllHistorycities() throws SQLException{
-//          List<CityHistory> cityHistories = new ArrayList<>();
-//          String sql ="SELECT * FROM CityHistory" ;
-//          Connection connection =getConnection();
-//          PreparedStatement statement = connection.prepareStatement(sql);
-//          ResultSet resultSet= statement.executeQuery();
-//          while (resultSet.next()) {
-//               int historicalDataId = resultSet.getInt("historicalDataId");
-//               int cityId = resultSet.getInt("cityId");
-//               String eventDate = resultSet.getString("eventDate");
-//               int temperature = resultSet.getInt("temperature");
-//               cityHistories.add(new CityHistory(historicalDataId, cityId, eventDate, temperature));
-//          }
-//          connection.close();
-//          statement.close();
-//          resultSet.close();
-//          return cityHistories;
-//          }
+
+
+     public static void addCity(City city) throws SQLException {
+          String sql = "INSERT INTO City(cityName, cityId, currentTemperature, currentHumidity, currentWindSpeed) VALUES (?, ?, ?, ?, ?)";
+          try {
+               Connection connection = getConnection();
+               PreparedStatement statement = connection.prepareStatement(sql);
+               statement.setString(1, city.getCityName());
+               statement.setInt(2, city.getCityId());
+               statement.setInt(3, city.getCurrentTemperature());
+               statement.setInt(4, city.getCurrentHumidity());
+               statement.setInt(5, city.getCurrentWindSpeed());
+               statement.executeUpdate();
+               connection.close();
+               statement.close();
+               System.out.println("The city is added successfully!");
+          } catch (SQLException e) {
+               e.printStackTrace();
+          }
      }
 
 
+     public ResultSet readAllCities() throws SQLException {
+          Connection connection = getConnection();
+          String query = "SELECT * FROM city ";
+          PreparedStatement statement = connection.prepareStatement(query);
+          return statement.executeQuery();
+     }
+
+     public static void updateCity(City city) throws SQLException {
+          String sql = "UPDATE city SET cityName = ?, currentTemperature = ?, currentHumidity = ?, currentWindSpeed = ? WHERE cityId = ?";
+          Connection connection = getConnection();
+          PreparedStatement statement = connection.prepareStatement(sql);
+          statement.setString(1, city.getCityName());
+          statement.setInt(2, city.getCurrentTemperature());
+          statement.setInt(3, city.getCurrentHumidity());
+          statement.setInt(4, city.getCurrentWindSpeed());
+          statement.setInt(5, city.getCityId());
+          statement.executeUpdate();
+          connection.close();
+          statement.close();
+          System.out.println("the city is updated successfully!");
+     }
+
+     public static void deleteCity(int cityId) throws SQLException {
+          String sql = "DELETE FROM City WHERE cityId = ?";
+          Connection connection = getConnection();
+          PreparedStatement statement = connection.prepareStatement(sql);
+          statement.setInt(1, cityId);
+          statement.executeUpdate();
+          connection.close();
+          statement.close();
+          System.out.println("City deleted successfully!");
+     }
+
+     public static City getCityByName(String cityName) throws SQLException {
+          String sql = "SELECT * FROM City WHERE cityName = ?";
+          Connection connection = getConnection();
+          PreparedStatement statement = connection.prepareStatement(sql);
+          statement.setString(1, cityName);
+          ResultSet resultSet = statement.executeQuery();
+          City city = new City();
+          if (resultSet.next()) {
+               city.setCityId(resultSet.getInt("cityId"));
+               city.setCityName(resultSet.getString("cityName"));
+               city.setCurrentTemperature(resultSet.getInt("currentTemperature"));
+               city.setCurrentHumidity(resultSet.getInt("currentHumidity"));
+               city.setCurrentWindSpeed(resultSet.getInt("currentWindSpeed"));
+          }
+          connection.close();
+          return city;
+     }
+
+
+     public static void addCityHistory(CityHistory cityHistory) throws SQLException {
+          String query = "INSERT INTO cityhistory (historicalDataId, cityId, eventDate, temperature) VALUES (?, ?, ?, ?)";
+          try {
+               Connection connection = getConnection();
+               PreparedStatement statement = connection.prepareStatement(query);
+               statement.setInt(1, cityHistory.getHistoricalDataId());
+               statement.setInt(2, cityHistory.getCityId());
+               statement.setString(3, cityHistory.getEventDate());
+               statement.setInt(4, cityHistory.getTemperature());
+               statement.executeUpdate();
+               connection.close();
+               statement.close();
+               connection.close();
+               System.out.println("The city is added successfully!");
+          } catch (SQLException e) {
+               e.printStackTrace();
+          }
+     }
+
+     public ResultSet readAllHistoryForCity(int cityId) throws SQLException {
+          Connection connection = getConnection();
+          String query = "SELECT * FROM cityhistory";
+          PreparedStatement statement = connection.prepareStatement(query);
+          return statement.executeQuery();
+     }
+
+     public static void updateCityHistory(CityHistory cityHistory) throws SQLException {
+          String query = "UPDATE cityhistory SET eventDate = ?, temperature = ? WHERE historicalDataId = ?";
+          Connection connection = getConnection();
+          PreparedStatement statement = connection.prepareStatement(query);
+          statement.setString(1, cityHistory.getEventDate());
+          statement.setInt(2, cityHistory.getTemperature());
+          statement.setInt(3, cityHistory.getHistoricalDataId());
+          statement.executeUpdate();
+          connection.close();
+          statement.close();
+          connection.close();
+          System.out.println("the cityHistory is updated successfully!");
+     }
+
+     public static void deleteCityHistory(int historicalDataId) throws SQLException {
+          String query = "DELETE FROM cityhistory WHERE historicalDataId = ?";
+          Connection connection = getConnection();
+          PreparedStatement statement = connection.prepareStatement(query);
+          statement.setInt(1, historicalDataId);
+          statement.executeUpdate();
+          connection.close();
+          statement.close();
+          System.out.println("The history of this city is deleted");
+     }
+
+     public static CityHistory getCityHistoryById(int id_h) throws SQLException {
+          String sql = "SELECT * FROM City ,CityHistory WHERE City.cityId = ?";
+          Connection connection = getConnection();
+          PreparedStatement statement = connection.prepareStatement(sql);
+          statement.setInt(1, id_h);
+          ResultSet resultSet = statement.executeQuery();
+          CityHistory city_h = null;
+          if (resultSet.next()) {
+               int historicalDataId = resultSet.getInt("historicalDataId");
+               int cityId = resultSet.getInt("cityId");
+               int temp = resultSet.getInt("temperature");
+               LocalDate eventDate = resultSet.getDate("eventDate").toLocalDate();
+               city_h = new CityHistory(historicalDataId, cityId, eventDate, temp);
+          }
+          connection.close();
+          return city_h;
+     }
+}
 
 
 
Index: ../PROJETS DE L'ENAA/WEATHER  APP/src/City.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\nimport static java.sql.DriverManager.getConnection;\r\n\r\nclass City {\r\n    private int cityId;\r\n    private String cityName;\r\n    private int currentTemperature;\r\n    private int currentHumidity;\r\n    private int currentWindSpeed;\r\n\r\n    public City(int cityId, String cityName, int currentTemperature, int currentHumidity, int currentWindSpeed) {\r\n        this.cityId = cityId;\r\n        this.cityName = cityName;\r\n        this.currentTemperature = currentTemperature;\r\n        this.currentHumidity = currentHumidity;\r\n        this.currentWindSpeed = currentWindSpeed;\r\n    }\r\n    public City() {}\r\n\r\n    public int getCityId() {\r\n        return cityId;\r\n    }\r\n\r\n    public String getCityName() {\r\n        return cityName;\r\n    }\r\n\r\n    public int getCurrentTemperature() {\r\n        return currentTemperature;\r\n    }\r\n\r\n    public int getCurrentHumidity() {\r\n        return currentHumidity;\r\n    }\r\n\r\n    public int getCurrentWindSpeed() {\r\n        return currentWindSpeed;\r\n    }\r\n\r\n    public void setCityId(int cityId) {\r\n        this.cityId = cityId;\r\n    }\r\n\r\n    public void setCityName(String cityName) {\r\n        this.cityName = cityName;\r\n    }\r\n\r\n    public void setCurrentTemperature(int currentTemperature) {\r\n        this.currentTemperature = currentTemperature;\r\n    }\r\n\r\n    public void setCurrentHumidity(int currentHumidity) {\r\n        this.currentHumidity = currentHumidity;\r\n    }\r\n\r\n    public void setCurrentWindSpeed(int currentWindSpeed) {\r\n        this.currentWindSpeed = currentWindSpeed;\r\n    }\r\n\r\n    private static Connection getConnection() throws SQLException {\r\n        return DatabaseManager.getConnection();\r\n    }\r\n    public static void addCity(City city) throws SQLException {\r\n        String sql = \"INSERT INTO City(cityName ,cityId,currentTemperature,currentHumidity,currentWindSpeed)WHERE cityId = ?\";\r\n        try {\r\n            Connection connection = getConnection();\r\n            PreparedStatement statement = connection.prepareStatement(sql);\r\n            statement.setString(1, city.getCityName());\r\n            statement.setInt(2, city.getCityId());\r\n            statement.setInt(3,city.getCurrentTemperature());\r\n            statement.setInt(4,city.getCurrentHumidity());\r\n            statement.setInt(5,city.getCurrentWindSpeed());\r\n            statement.executeUpdate();\r\n            connection.close();\r\n            statement.close();\r\n            System.out.println(\"the city is added successfully!\");\r\n        }\r\n    }\r\n\r\n    public ResultSet readAllCities() throws SQLException {\r\n        Connection connection = getConnection();\r\n        String query = \"SELECT * FROM city\";\r\n        PreparedStatement statement = connection.prepareStatement(query);\r\n        return statement.executeQuery();\r\n    }\r\n}\r\n    public static void updateCity(City city) throws SQLException {\r\n         String sql = \"UPDATE City SET cityName = ? WHERE cityId = ?\";\r\n         Connection connection = getConnection();\r\n         PreparedStatement statement = connection.prepareStatement(sql);\r\n         statement.setString(1, city.getCityName());\r\n         statement.setInt(2, city.getCityId());\r\n         statement.executeUpdate();\r\n         connection.close();\r\n         statement.close();\r\n         System.out.println(\"the city is updated successfully!\");\r\n    }\r\npublic static void deleteCity(int cityId) throws SQLException {\r\n    String sql = \"DELETE FROM City WHERE cityId = ?\";\r\n    Connection connection = getConnection();\r\n    PreparedStatement statement = connection.prepareStatement(sql);\r\n    statement.setInt(1, cityId);\r\n    statement.executeUpdate();\r\n    connection.close();\r\n    statement.close();\r\n    System.out.println(\"City deleted successfully!\");\r\n}\r\n}\r\n
===================================================================
diff --git a/../PROJETS DE L'ENAA/WEATHER  APP/src/City.java b/../PROJETS DE L'ENAA/WEATHER  APP/src/City.java
--- a/../PROJETS DE L'ENAA/WEATHER  APP/src/City.java	
+++ b/../PROJETS DE L'ENAA/WEATHER  APP/src/City.java	
@@ -2,9 +2,6 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-
-import static java.sql.DriverManager.getConnection;
-
 class City {
     private int cityId;
     private String cityName;
@@ -19,7 +16,9 @@
         this.currentHumidity = currentHumidity;
         this.currentWindSpeed = currentWindSpeed;
     }
-    public City() {}
+
+    public City() {
+    }
 
     public int getCityId() {
         return cityId;
@@ -61,52 +60,16 @@
         this.currentWindSpeed = currentWindSpeed;
     }
 
-    private static Connection getConnection() throws SQLException {
-        return DatabaseManager.getConnection();
+    @Override
+    public String toString() {
+        return "City{" +
+                "cityId=" + cityId +
+                ", cityName='" + cityName + '\'' +
+                ", currentTemperature=" + currentTemperature +
+                ", currentHumidity=" + currentHumidity +
+                ", currentWindSpeed=" + currentWindSpeed +
+                '}';
     }
-    public static void addCity(City city) throws SQLException {
-        String sql = "INSERT INTO City(cityName ,cityId,currentTemperature,currentHumidity,currentWindSpeed)WHERE cityId = ?";
-        try {
-            Connection connection = getConnection();
-            PreparedStatement statement = connection.prepareStatement(sql);
-            statement.setString(1, city.getCityName());
-            statement.setInt(2, city.getCityId());
-            statement.setInt(3,city.getCurrentTemperature());
-            statement.setInt(4,city.getCurrentHumidity());
-            statement.setInt(5,city.getCurrentWindSpeed());
-            statement.executeUpdate();
-            connection.close();
-            statement.close();
-            System.out.println("the city is added successfully!");
-        }
-    }
+}
 
-    public ResultSet readAllCities() throws SQLException {
-        Connection connection = getConnection();
-        String query = "SELECT * FROM city";
-        PreparedStatement statement = connection.prepareStatement(query);
-        return statement.executeQuery();
-    }
-}
-    public static void updateCity(City city) throws SQLException {
-         String sql = "UPDATE City SET cityName = ? WHERE cityId = ?";
-         Connection connection = getConnection();
-         PreparedStatement statement = connection.prepareStatement(sql);
-         statement.setString(1, city.getCityName());
-         statement.setInt(2, city.getCityId());
-         statement.executeUpdate();
-         connection.close();
-         statement.close();
-         System.out.println("the city is updated successfully!");
-    }
-public static void deleteCity(int cityId) throws SQLException {
-    String sql = "DELETE FROM City WHERE cityId = ?";
-    Connection connection = getConnection();
-    PreparedStatement statement = connection.prepareStatement(sql);
-    statement.setInt(1, cityId);
-    statement.executeUpdate();
-    connection.close();
-    statement.close();
-    System.out.println("City deleted successfully!");
-}
-}
+
Index: ../Etudiants_gestion/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <groupId>org.example</groupId>\r\n  <artifactId>Etudiants_gestion</artifactId>\r\n  <packaging>war</packaging>\r\n  <version>1.0-SNAPSHOT</version>\r\n  <name>Etudiants_gestion Maven Webapp</name>\r\n  <url>http://maven.apache.org</url>\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>3.8.1</version>\r\n      <scope>test</scope>\r\n    </dependency>\r\n  </dependencies>\r\n  <build>\r\n    <finalName>Etudiants_gestion</finalName>\r\n  </build>\r\n</project>\r\n
===================================================================
diff --git a/../Etudiants_gestion/pom.xml b/../Etudiants_gestion/pom.xml
--- a/../Etudiants_gestion/pom.xml	
+++ b/../Etudiants_gestion/pom.xml	
@@ -14,6 +14,53 @@
       <version>3.8.1</version>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-webmvc</artifactId>
+      <version>5.3.23</version>
+    </dependency>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>javax.servlet-api</artifactId>
+      <version>4.0.1</version>
+    </dependency>
+    <dependency>
+      <groupId>mysql</groupId>
+      <artifactId>mysql-connector-java</artifactId>
+      <version>8.0.33</version>
+    </dependency>
+    <dependency>
+      <groupId>javax.servlet</groupId>
+      <artifactId>jstl</artifactId>
+      <version>1.2</version>
+    </dependency>
+    <dependency>
+      <groupId>org.hibernate.orm</groupId>
+      <artifactId>hibernate-core</artifactId>
+      <version>6.2.7.Final</version>
+    </dependency>
+    <dependency>
+      <groupId>org.jetbrains</groupId>
+      <artifactId>annotations</artifactId>
+      <version>RELEASE</version>
+      <scope>compile</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.maven</groupId>
+      <artifactId>maven-model</artifactId>
+      <version>3.2.5</version>
+    </dependency>
+    <dependency>
+      <groupId>org.springframework</groupId>
+      <artifactId>spring-context</artifactId>
+      <version>5.3.23</version>
+    </dependency>
+    <dependency>
+      <groupId>javax.annotation</groupId>
+      <artifactId>javax.annotation-api</artifactId>
+      <version>1.3.2</version>
+    </dependency>
+
   </dependencies>
   <build>
     <finalName>Etudiants_gestion</finalName>
Index: ../PROJETS DE L'ENAA/WEATHER  APP/src/Menu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.Scanner;\r\n\r\npublic class Menu {\r\n    private City city;\r\n    private CityHistory cityHistory;\r\n\r\n    public Menu(City city, CityHistory cityHistory) {\r\n        this.city = city;\r\n        this.cityHistory = cityHistory;\r\n    }\r\n\r\n    public void showMenu() {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int option;\r\n        do {\r\n            System.out.println(\"MENU:\");\r\n            System.out.println(\"1. Add city\");\r\n            System.out.println(\"2. Read all cities\");\r\n            System.out.println(\"3. Read city history\");\r\n            System.out.println(\"4. Exit\");\r\n            System.out.println(\"Choose an option:\");\r\n\r\n            option = scanner.nextInt();\r\n            scanner.nextLine(); // Consume newline\r\n\r\n            switch (option) {\r\n                case 1:\r\n                    // Ajouter une ville (à implémenter)\r\n                    break;\r\n                case 2:\r\n                    // Lire toutes les villes\r\n                    try {\r\n                        ResultSet resultSet = city.readAllCities();\r\n                        while (resultSet.next()) {\r\n                            int cityId = resultSet.getInt(\"cityId\");\r\n                            String cityName = resultSet.getString(\"cityName\");\r\n                            int currentTemperature = resultSet.getInt(\"currentTemperature\");\r\n                            int currentHumidity = resultSet.getInt(\"currentHumidity\");\r\n                            int currentwindSpeed = resultSet.getInt(\"currentWindSpeed\");\r\n\r\n                            System.out.println(\"City ID: \" + cityId);\r\n                            System.out.println(\"City Name: \" + cityName);\r\n                            System.out.println(\"Temperature: \" + currentTemperature);\r\n                            System.out.println(\"Humidity: \" + currentHumidity);\r\n                            System.out.println(\"Wind Speed: \" + currentwindSpeed);\r\n                            System.out.println();\r\n                        }\r\n                    } catch (SQLException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    // Lire l'historique de la ville\r\n                    System.out.println(\"Enter city ID to view history:\");\r\n                    int cityId = scanner.nextInt();\r\n                    scanner.nextLine(); // Consume newline\r\n                    try {\r\n                        ResultSet historyResultSet = cityHistory.readAllHistoryForCity(cityId);\r\n                        while (historyResultSet.next()) {\r\n                            int historicalDataId = historyResultSet.getInt(\"historicalDataId\");\r\n                            String eventDate = historyResultSet.getString(\"eventDate\");\r\n                            int temperature = historyResultSet.getInt(\"temperature\");\r\n\r\n                            System.out.println(\"Historical Data ID: \" + historicalDataId);\r\n                            System.out.println(\"Event Date: \" + eventDate);\r\n                            System.out.println(\"Temperature: \" + temperature);\r\n                            System.out.println();\r\n                        }\r\n                    } catch (SQLException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    System.out.println(\"Exiting...\");\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Invalid option. Please try again.\");\r\n                    break;\r\n            }\r\n        } while (option != 4);\r\n    }\r\n}\r\n
===================================================================
diff --git a/../PROJETS DE L'ENAA/WEATHER  APP/src/Menu.java b/../PROJETS DE L'ENAA/WEATHER  APP/src/Menu.java
--- a/../PROJETS DE L'ENAA/WEATHER  APP/src/Menu.java	
+++ b/../PROJETS DE L'ENAA/WEATHER  APP/src/Menu.java	
@@ -1,84 +1,213 @@
-import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.time.LocalDate;
+import java.time.format.DateTimeFormatter;
 import java.util.Scanner;
 
 public class Menu {
-    private City city;
-    private CityHistory cityHistory;
+    public static void MenuPrincipal() throws SQLException {
+        int choiceofMain;
 
-    public Menu(City city, CityHistory cityHistory) {
-        this.city = city;
-        this.cityHistory = cityHistory;
+        do {
+            System.out.println("PRINCIPAL MENU ");
+            System.out.println("1 -MENU OF CITY");
+            System.out.println("2 -MENU OF CITY HISTORY");
+            System.out.println("EXIT ..");
+            System.out.print("ENTER YOUR CHOICE ");
+            choiceofMain = new Scanner(System.in).nextInt();
+            switch (choiceofMain) {
+                case 1:
+                    cityMenu();
+                    break;
+                case 2:
+                    cityHistoryMenu();
+                    break;
+                case 3:
+                    System.out.println("exit ");
+                    break;
+                default:
+                    System.out.println("invalid choice ");
+                    break;
+            }
+        } while (choiceofMain != 3);
     }
 
-    public void showMenu() {
+    public static void cityMenu() throws SQLException {
         Scanner scanner = new Scanner(System.in);
-        int option;
+        int choice, cityId, currentTemperature, currentHumidity, currentWindSpeed;
+        String cityName;
+
         do {
-            System.out.println("MENU:");
-            System.out.println("1. Add city");
-            System.out.println("2. Read all cities");
-            System.out.println("3. Read city history");
-            System.out.println("4. Exit");
-            System.out.println("Choose an option:");
+            System.out.println("Menu of the City");
+            System.out.println("1. Add City ");
+            System.out.println("2. Update City ");
+            System.out.println("3. Delete City  ");
+            System.out.println("4. Read All Cities");
+            System.out.println("5. get city by name");
+            System.out.println("6. Quit");
+            System.out.println("Enter your choice: ");
+            choice = scanner.nextInt();
+            scanner.nextLine(); // Consume newline
 
+            switch (choice) {
+                case 1:
+                    System.out.print("ID : ");
+                    cityId = scanner.nextInt();
+                    scanner.nextLine(); // Consume newline
+                    System.out.print("NAME : ");
+                    cityName = scanner.nextLine();
+                    System.out.print("Current Temperature : ");
+                    currentTemperature = scanner.nextInt();
+                    System.out.print("Current Humidity : ");
+                    currentHumidity = scanner.nextInt();
+                    System.out.print("Current WindSpeed : ");
+                    currentWindSpeed = scanner.nextInt();
+                    System.out.println("city added successfully ");
+                    DatabaseManager.addCity(new City(cityId, cityName, currentTemperature, currentHumidity, currentWindSpeed));
+                    break;
+                case 2:
+                    System.out.print("Enter City ID to update: ");
+                    cityId = scanner.nextInt();
+                    scanner.nextLine(); // Consume newline
+                    System.out.print("NAME : ");
+                    cityName = scanner.nextLine();
+                    System.out.print("Current Temperature : ");
+                    currentTemperature = scanner.nextInt();
+                    System.out.print("Current Humidity : ");
+                    currentHumidity = scanner.nextInt();
+                    System.out.print("Current WindSpeed : ");
+                    currentWindSpeed = scanner.nextInt();
+                    DatabaseManager.updateCity(new City(cityId, cityName, currentTemperature, currentHumidity, currentWindSpeed));
+                    break;
+                case 3:
+                    System.out.print("Enter ID of the city to delete: ");
+                    cityId = scanner.nextInt();
+                    DatabaseManager.deleteCity(cityId);
+                    break;
+                case 4:
+                    System.out.println("All Cities:");
+                    for (City city : DatabaseManager.getAllcities()) {
+                        System.out.println(city);
+                    }
+                    break;
+                case 5:
+                    System.out.print("Enter the name of the city to search: ");
+                    String cityNameToSearch = new Scanner(System.in).nextLine();
+                    City selectedCity = DatabaseManager.getCityByName(cityNameToSearch);
+
+                    if (selectedCity != null) {
+                        System.out.println("Selected City:");
+                        System.out.println("ID: " + selectedCity.getCityId());
+                        System.out.println("Name: " + selectedCity.getCityName());
+                        System.out.println("Temperature: " + selectedCity.getCurrentTemperature());
+                        System.out.println("Humidity: " + selectedCity.getCurrentHumidity());
+                        System.out.println("Wind Speed: " + selectedCity.getCurrentWindSpeed());
+                    } else {
+                        System.out.println("City not exists.");
+                    }
+                    break;
+                case 6:
+                    System.out.println("Exit");
+                    break;
+                default:
+                    System.out.println("invalid choice");
+                    break;
+            }
+        } while (choice != 6);
+        scanner.close();
+    }
+
+    public static void cityHistoryMenu() throws SQLException {
+        int option, historicalDataId, cityId, temperature;
+        String eventDateInput;
+        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
+        LocalDate eventDate;
+
+        Scanner scanner = new Scanner(System.in);
+        do {
+            System.out.println("Menu of the CityHistory");
+            System.out.println("1. Add City History");
+            System.out.println("2. Read All the History of the City");
+            System.out.println("3. Update City History");
+            System.out.println("4. Delete City History");
+            System.out.println("5. get cityHistory  by ID");
+            System.out.println("6. Exit");
+            System.out.println("Enter your option: ");
             option = scanner.nextInt();
-            scanner.nextLine(); // Consume newline
 
             switch (option) {
                 case 1:
-                    // Ajouter une ville (à implémenter)
+                    System.out.println("DataID : ");
+                    historicalDataId = scanner.nextInt();
+                    System.out.print("Temperature : ");
+                    temperature = scanner.nextInt();
+                    System.out.println("Enter event date (DD/MM/YYYY): ");
+                    eventDateInput = scanner.next();
+                    eventDate = LocalDate.parse(eventDateInput, formatter);
+                    System.out.println("City Id : ");
+                    cityId = scanner.nextInt();
+                    DatabaseManager.addCityHistory(new CityHistory(historicalDataId, cityId, eventDate.toString(), temperature));
                     break;
                 case 2:
-                    // Lire toutes les villes
-                    try {
-                        ResultSet resultSet = city.readAllCities();
-                        while (resultSet.next()) {
-                            int cityId = resultSet.getInt("cityId");
-                            String cityName = resultSet.getString("cityName");
-                            int currentTemperature = resultSet.getInt("currentTemperature");
-                            int currentHumidity = resultSet.getInt("currentHumidity");
-                            int currentwindSpeed = resultSet.getInt("currentWindSpeed");
-
-                            System.out.println("City ID: " + cityId);
-                            System.out.println("City Name: " + cityName);
-                            System.out.println("Temperature: " + currentTemperature);
-                            System.out.println("Humidity: " + currentHumidity);
-                            System.out.println("Wind Speed: " + currentwindSpeed);
-                            System.out.println();
-                        }
-                    } catch (SQLException e) {
-                        e.printStackTrace();
+                    System.out.println("All City Histories:");
+                    for (CityHistory cth : DatabaseManager.getAllHistorycities()) {
+                        System.out.println(cth);
                     }
                     break;
+
                 case 3:
-                    // Lire l'historique de la ville
-                    System.out.println("Enter city ID to view history:");
-                    int cityId = scanner.nextInt();
-                    scanner.nextLine(); // Consume newline
-                    try {
-                        ResultSet historyResultSet = cityHistory.readAllHistoryForCity(cityId);
-                        while (historyResultSet.next()) {
-                            int historicalDataId = historyResultSet.getInt("historicalDataId");
-                            String eventDate = historyResultSet.getString("eventDate");
-                            int temperature = historyResultSet.getInt("temperature");
-
-                            System.out.println("Historical Data ID: " + historicalDataId);
-                            System.out.println("Event Date: " + eventDate);
-                            System.out.println("Temperature: " + temperature);
-                            System.out.println();
-                        }
-                    } catch (SQLException e) {
-                        e.printStackTrace();
-                    }
+                    System.out.print("Enter Historical Data ID to update: ");
+                    historicalDataId = scanner.nextInt();
+                    System.out.print("Temperature : ");
+                    temperature = scanner.nextInt();
+                    System.out.println("Enter event date (DD/MM/YYYY): ");
+                    eventDateInput = scanner.next();
+                    eventDate = LocalDate.parse(eventDateInput, formatter);
+                    System.out.print("City Id : ");
+                    cityId = scanner.nextInt();
+                    DatabaseManager.updateCityHistory(new CityHistory(historicalDataId, cityId, eventDate.toString(), temperature));
                     break;
                 case 4:
-                    System.out.println("Exiting...");
+                    System.out.print("Enter Historical Data ID to delete: ");
+                    historicalDataId = scanner.nextInt();
+                    DatabaseManager.deleteCityHistory(historicalDataId);
                     break;
+
+                case 5:
+                    System.out.println("Enter the Id of the city history to search: ");
+                    int cityIdtosearch = new Scanner(System.in).nextInt();
+                    CityHistory selectedCity = DatabaseManager.getCityHistoryById(cityIdtosearch);
+                    if (selectedCity != null) {
+//                        System.out.println("Selected CityHistory:");
+//                        System.out.println("historicalDataId: " + selectedCityHistory.getHistoricalDataId());
+//                        System.out.println("ID: " + selectedCityHistory.getCityId());
+//                        System.out.println("eventDate: " + selectedCityHistory.getEventDate());
+//                        System.out.println("temperature: " + selectedCityHistory.getTemperature());
+                        for (CityHistory cth : DatabaseManager.getAllHistorycities()) {
+                            System.out.println(cth);
+                        }
+                    } else {
+                        System.out.println("City history not found.");
+                    }
+
+                    break;
+                case 6:
+                    System.out.println("Exit");
                 default:
-                    System.out.println("Invalid option. Please try again.");
+                    System.out.println("Invalid option");
                     break;
+
             }
-        } while (option != 4);
+        }
+        while (option != 6) ;
+        scanner.close();
+
     }
 }
+
+
+
+
+
+
+
+
Index: ../Etudiants_gestion/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$/..\" vcs=\"Git\" />\r\n  </component>\r\n</project>
===================================================================
diff --git a/../Etudiants_gestion/.idea/vcs.xml b/../Etudiants_gestion/.idea/vcs.xml
--- a/../Etudiants_gestion/.idea/vcs.xml	
+++ b/../Etudiants_gestion/.idea/vcs.xml	
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: ../PROJETS DE L'ENAA/WEATHER  APP/src/CityHistory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\n\r\npublic class CityHistory {\r\n    private int historicalDataId;\r\n    private int cityId;\r\n    private String eventDate;\r\n    private int temperature;\r\n\r\n    public CityHistory(int historicalDataId, int cityId, String eventDate, int temperature) {\r\n        this.historicalDataId = historicalDataId;\r\n        this.cityId = cityId;\r\n        this.eventDate = eventDate;\r\n        this.temperature = temperature;\r\n    }\r\n\r\n    public CityHistory() {}\r\n\r\n    public int getHistoricalDataId() {\r\n        return historicalDataId;\r\n    }\r\n\r\n    public int getCityId() {\r\n        return cityId;\r\n    }\r\n\r\n    public String getEventDate() {\r\n        return eventDate;\r\n    }\r\n\r\n    public int getTemperature() {\r\n        return temperature;\r\n    }\r\n\r\n    public void setHistoricalDataId(int historicalDataId) {\r\n        this.historicalDataId = historicalDataId;\r\n    }\r\n\r\n    public void setCityId(int cityId) {\r\n        this.cityId = cityId;\r\n    }\r\n\r\n    public void setEventDate(String eventDate) {\r\n        this.eventDate = eventDate;\r\n    }\r\n\r\n    public void setTemperature(int temperature) {\r\n        this.temperature = temperature;\r\n    }\r\n\r\n    private static Connection getConnection() throws SQLException {\r\n        return DatabaseManager.getConnection();\r\n    }\r\n\r\n    public ResultSet readAllHistoryForCity(int cityId) throws SQLException {\r\n        Connection connection = getConnection();\r\n        String query = \"SELECT * FROM cityhistory WHERE cityId = ?\";\r\n        PreparedStatement statement = connection.prepareStatement(query);\r\n        statement.setInt(1, cityId);\r\n        return statement.executeQuery();\r\n    }\r\n\r\n    public void addCityHistory(CityHistory cityHistory) throws SQLException {\r\n        Connection connection = getConnection();\r\n        String query = \"INSERT INTO cityhistory (historicalDataId, cityId, eventDate, temperature) VALUES (?, ?, ?, ?)\";\r\n        PreparedStatement statement = connection.prepareStatement(query);\r\n        statement.setInt(1, cityHistory.getHistoricalDataId());\r\n        statement.setInt(2, cityHistory.getCityId());\r\n        statement.setString(3, cityHistory.getEventDate());\r\n        statement.setInt(4, cityHistory.getTemperature());\r\n        statement.executeUpdate();\r\n        statement.close();\r\n        connection.close();\r\n    }\r\n\r\n    public void updateCityHistory(CityHistory cityHistory) throws SQLException {\r\n        Connection connection = getConnection();\r\n        String query = \"UPDATE cityhistory SET eventDate = ?, temperature = ? WHERE historicalDataId = ?\";\r\n        PreparedStatement statement = connection.prepareStatement(query);\r\n        statement.setString(1, cityHistory.getEventDate());\r\n        statement.setInt(2, cityHistory.getTemperature());\r\n        statement.setInt(3, cityHistory.getHistoricalDataId());\r\n        statement.executeUpdate();\r\n        statement.close();\r\n        connection.close();\r\n    }\r\n\r\n    public void deleteCityHistory(int historicalDataId) throws SQLException {\r\n        Connection connection = getConnection();\r\n        String query = \"DELETE FROM cityhistory WHERE historicalDataId = ?\";\r\n        PreparedStatement statement = connection.prepareStatement(query);\r\n        statement.setInt(1, historicalDataId);\r\n        statement.executeUpdate();\r\n        statement.close();\r\n        connection.close();\r\n    }\r\n}\r\n//import java.sql.PreparedStatement;\r\n//import java.sql.ResultSet;\r\n//import java.sql.SQLException;\r\n//import static java.sql.DriverManager.getConnection;\r\n//\r\n//public class CityHistory {\r\n//    private int historicalDataId ;\r\n//    private int cityId ;\r\n//    private String eventDate ;\r\n//    private int temperature ;\r\n//    // Constructor\r\n//\r\n//    public CityHistory(int historicalDataId, int cityId, String eventDate, int temperature) {\r\n//        this.historicalDataId = historicalDataId;\r\n//        this.cityId = cityId;\r\n//        this.eventDate = eventDate;\r\n//        this.temperature = temperature;\r\n//    }\r\n////setters\r\n//    public void setHistoricalDataId(int historicalDataId) {\r\n//        this.historicalDataId = historicalDataId;\r\n//    }\r\n//\r\n//    public void setCityId(int cityId) {\r\n//        this.cityId = cityId;\r\n//    }\r\n//\r\n//    public void setEventDate(String eventDate) {\r\n//        this.eventDate = eventDate;\r\n//    }\r\n//\r\n//    public void setTemperature(int temperature) {\r\n//        this.temperature = temperature;\r\n//    }\r\n////getters\r\n//    public int getHistoricalDataId() {\r\n//        return historicalDataId;\r\n//    }\r\n//\r\n//    public int getCityId() {\r\n//        return cityId;\r\n//    }\r\n//\r\n//    public String getEventDate() {\r\n//        return eventDate;\r\n//    }\r\n//    public int getTemperature() {\r\n//        return temperature;\r\n//    }\r\n//    public static void addCityHistory(CityHistory cityHistory) throws SQLException {\r\n//        String sql = \"INSERT INTO CityHistory (historicalDataId, cityId, eventDate, temperature) VALUES (?, ?, ?, ?)\";\r\n//        Connection connection = getConnection();\r\n//        PreparedStatement statement = connection.prepareStatement(sql);\r\n//        statement.setInt(1, cityHistory.getHistoricalDataId());\r\n//        statement.setString(2, cityHistory.getEventDate());\r\n//        statement.setInt(3,cityHistory.getTemperature());\r\n//        statement.setInt(4,cityHistory.getCityId());\r\n//        statement.executeUpdate();\r\n//        connection.close();\r\n//        statement.close();\r\n//        System.out.println(\"the history of this city is added successfully!\");\r\n//    }\r\n//    public ResultSet readAllhistoryCity() throws SQLException {\r\n//        Connection connection = getConnection();\r\n//        String query = \"SELECT * FROM cityHistories\";\r\n//        PreparedStatement statement = connection.prepareStatement(query);\r\n//        return statement.executeQuery();\r\n//    }\r\n//    public static void updateHistory(CityHistory cityHistory) throws SQLException {\r\n//        String sql = \"UPDATE CityHistory SET historicalDataId = ? WHERE cityId = ?\";\r\n//        Connection connection = getConnection();\r\n//        PreparedStatement statement = connection.prepareStatement(sql);\r\n//        statement.setInt(1 ,cityHistory.getHistoricalDataId());\r\n//        statement.setInt(2,cityHistory.getCityId());\r\n//        statement.executeUpdate();\r\n//        connection.close();\r\n//        statement.close();\r\n//        System.out.println(\"the history of this city is updated\");\r\n//    }\r\n//    public static void deleteHistory(int historicalDataId ) throws SQLException{\r\n//        String sql = \"UPDATE CityHistory SET historicalDataId = ?WHERE cityId = ?\";\r\n//        Connection connection =getConnection();\r\n//        PreparedStatement statement = connection.prepareStatement(sql);\r\n//        statement.setInt(1 ,cityHistory.getHistoricalDataId());\r\n//        statement.setInt(2,cityHistory.getCityId());\r\n//        statement.executeUpdate();\r\n//        connection.close();\r\n//        statement.close();\r\n//        System.out.println(\"the history of this city is deleted\");\r\n//    }
===================================================================
diff --git a/../PROJETS DE L'ENAA/WEATHER  APP/src/CityHistory.java b/../PROJETS DE L'ENAA/WEATHER  APP/src/CityHistory.java
--- a/../PROJETS DE L'ENAA/WEATHER  APP/src/CityHistory.java	
+++ b/../PROJETS DE L'ENAA/WEATHER  APP/src/CityHistory.java	
@@ -2,6 +2,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.time.LocalDate;
 
 public class CityHistory {
     private int historicalDataId;
@@ -9,6 +10,7 @@
     private String eventDate;
     private int temperature;
 
+    // Constructor
     public CityHistory(int historicalDataId, int cityId, String eventDate, int temperature) {
         this.historicalDataId = historicalDataId;
         this.cityId = cityId;
@@ -16,7 +18,12 @@
         this.temperature = temperature;
     }
 
-    public CityHistory() {}
+    public CityHistory() {
+    }
+
+    public CityHistory(int historicalDataId, int cityId, LocalDate eventDate, int temp) {
+    }
+    //getters
 
     public int getHistoricalDataId() {
         return historicalDataId;
@@ -34,6 +41,7 @@
         return temperature;
     }
 
+    //setters
     public void setHistoricalDataId(int historicalDataId) {
         this.historicalDataId = historicalDataId;
     }
@@ -50,140 +58,13 @@
         this.temperature = temperature;
     }
 
-    private static Connection getConnection() throws SQLException {
-        return DatabaseManager.getConnection();
-    }
-
-    public ResultSet readAllHistoryForCity(int cityId) throws SQLException {
-        Connection connection = getConnection();
-        String query = "SELECT * FROM cityhistory WHERE cityId = ?";
-        PreparedStatement statement = connection.prepareStatement(query);
-        statement.setInt(1, cityId);
-        return statement.executeQuery();
+    @Override
+    public String toString() {
+        return "CityHistory{" +
+                "historicalDataId=" + historicalDataId +
+                ", cityId=" + cityId +
+                ", eventDate='" + eventDate + '\'' +
+                ", temperature=" + temperature +
+                '}';
     }
-
-    public void addCityHistory(CityHistory cityHistory) throws SQLException {
-        Connection connection = getConnection();
-        String query = "INSERT INTO cityhistory (historicalDataId, cityId, eventDate, temperature) VALUES (?, ?, ?, ?)";
-        PreparedStatement statement = connection.prepareStatement(query);
-        statement.setInt(1, cityHistory.getHistoricalDataId());
-        statement.setInt(2, cityHistory.getCityId());
-        statement.setString(3, cityHistory.getEventDate());
-        statement.setInt(4, cityHistory.getTemperature());
-        statement.executeUpdate();
-        statement.close();
-        connection.close();
-    }
-
-    public void updateCityHistory(CityHistory cityHistory) throws SQLException {
-        Connection connection = getConnection();
-        String query = "UPDATE cityhistory SET eventDate = ?, temperature = ? WHERE historicalDataId = ?";
-        PreparedStatement statement = connection.prepareStatement(query);
-        statement.setString(1, cityHistory.getEventDate());
-        statement.setInt(2, cityHistory.getTemperature());
-        statement.setInt(3, cityHistory.getHistoricalDataId());
-        statement.executeUpdate();
-        statement.close();
-        connection.close();
-    }
-
-    public void deleteCityHistory(int historicalDataId) throws SQLException {
-        Connection connection = getConnection();
-        String query = "DELETE FROM cityhistory WHERE historicalDataId = ?";
-        PreparedStatement statement = connection.prepareStatement(query);
-        statement.setInt(1, historicalDataId);
-        statement.executeUpdate();
-        statement.close();
-        connection.close();
-    }
-}
-//import java.sql.PreparedStatement;
-//import java.sql.ResultSet;
-//import java.sql.SQLException;
-//import static java.sql.DriverManager.getConnection;
-//
-//public class CityHistory {
-//    private int historicalDataId ;
-//    private int cityId ;
-//    private String eventDate ;
-//    private int temperature ;
-//    // Constructor
-//
-//    public CityHistory(int historicalDataId, int cityId, String eventDate, int temperature) {
-//        this.historicalDataId = historicalDataId;
-//        this.cityId = cityId;
-//        this.eventDate = eventDate;
-//        this.temperature = temperature;
-//    }
-////setters
-//    public void setHistoricalDataId(int historicalDataId) {
-//        this.historicalDataId = historicalDataId;
-//    }
-//
-//    public void setCityId(int cityId) {
-//        this.cityId = cityId;
-//    }
-//
-//    public void setEventDate(String eventDate) {
-//        this.eventDate = eventDate;
-//    }
-//
-//    public void setTemperature(int temperature) {
-//        this.temperature = temperature;
-//    }
-////getters
-//    public int getHistoricalDataId() {
-//        return historicalDataId;
-//    }
-//
-//    public int getCityId() {
-//        return cityId;
-//    }
-//
-//    public String getEventDate() {
-//        return eventDate;
-//    }
-//    public int getTemperature() {
-//        return temperature;
-//    }
-//    public static void addCityHistory(CityHistory cityHistory) throws SQLException {
-//        String sql = "INSERT INTO CityHistory (historicalDataId, cityId, eventDate, temperature) VALUES (?, ?, ?, ?)";
-//        Connection connection = getConnection();
-//        PreparedStatement statement = connection.prepareStatement(sql);
-//        statement.setInt(1, cityHistory.getHistoricalDataId());
-//        statement.setString(2, cityHistory.getEventDate());
-//        statement.setInt(3,cityHistory.getTemperature());
-//        statement.setInt(4,cityHistory.getCityId());
-//        statement.executeUpdate();
-//        connection.close();
-//        statement.close();
-//        System.out.println("the history of this city is added successfully!");
-//    }
-//    public ResultSet readAllhistoryCity() throws SQLException {
-//        Connection connection = getConnection();
-//        String query = "SELECT * FROM cityHistories";
-//        PreparedStatement statement = connection.prepareStatement(query);
-//        return statement.executeQuery();
-//    }
-//    public static void updateHistory(CityHistory cityHistory) throws SQLException {
-//        String sql = "UPDATE CityHistory SET historicalDataId = ? WHERE cityId = ?";
-//        Connection connection = getConnection();
-//        PreparedStatement statement = connection.prepareStatement(sql);
-//        statement.setInt(1 ,cityHistory.getHistoricalDataId());
-//        statement.setInt(2,cityHistory.getCityId());
-//        statement.executeUpdate();
-//        connection.close();
-//        statement.close();
-//        System.out.println("the history of this city is updated");
-//    }
-//    public static void deleteHistory(int historicalDataId ) throws SQLException{
-//        String sql = "UPDATE CityHistory SET historicalDataId = ?WHERE cityId = ?";
-//        Connection connection =getConnection();
-//        PreparedStatement statement = connection.prepareStatement(sql);
-//        statement.setInt(1 ,cityHistory.getHistoricalDataId());
-//        statement.setInt(2,cityHistory.getCityId());
-//        statement.executeUpdate();
-//        connection.close();
-//        statement.close();
-//        System.out.println("the history of this city is deleted");
-//    }
\ No newline at end of file
+}
\ No newline at end of file
